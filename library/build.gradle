/*
 * Copyright 2017 Michael Rozumyanskiy
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import com.jfrog.bintray.gradle.BintrayUploadTask

plugins {
  id "com.jfrog.bintray" version "1.6"
}

apply plugin: 'com.android.library'
apply plugin: 'maven-publish'
apply plugin: 'com.getkeepsafe.dexcount'

group 'io.michaelrocks'
version '8.5.0'

configurations {
  metadata
}

dependencies {
  compile group: 'com.googlecode.libphonenumber', name: 'libphonenumber', version: '8.5.0', classifier: 'no-metadata'
  metadata 'com.googlecode.libphonenumber:libphonenumber:8.5.0'
  androidTestCompile 'junit:junit:4.12'
  androidTestCompile 'com.android.support.test:runner:0.5'
}

android {
  compileSdkVersion projectCompileSdkVersion
  buildToolsVersion projectBuildToolsVersion

  defaultConfig {
    minSdkVersion projectMinSdkVersion
    targetSdkVersion projectTargetSdkVersion
    testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_7
    targetCompatibility JavaVersion.VERSION_1_7
  }

  lintOptions {
    textReport true
    textOutput 'stdout'
  }

  sourceSets {
    main {
      assets.srcDirs += "$buildDir/assets"
    }
  }
}

task extractMetadata(type: Sync) {
  from {
    configurations.metadata.collect { zipTree(it) }
  }
  into "$buildDir/assets"
  include "com/google/i18n/phonenumbers/data/**"
}

tasks.whenTaskAdded {
  if (it.name.startsWith('assemble')) {
    it.dependsOn extractMetadata
  }
}

publishing {
  def artifactName = 'libphonenumber-android'

  android.libraryVariants.all { variant ->
    project.tasks.create("bintrayUpload${variant.name.capitalize()}", BintrayUploadTask) {
      apiUrl = BintrayUploadTask.API_URL_DEFAULT

      user = project.findProperty('bintrayUser')
      apiKey = project.findProperty('bintrayKey')
      publications = [variant.name.capitalize()]

      repoName = 'maven'
      packageName = artifactName

      versionName = project.version
      versionReleased = new Date()
      versionVcsTag = "v${project.version}"

      dependsOn tasks["assemble${variant.name.capitalize()}"]
    }

    project.tasks.create("javadoc${variant.name.capitalize()}", Javadoc) {
      source = variant.sourceSets.javaDirectories
      classpath += variant.javaCompile.classpath
      classpath += project.files(android.getBootClasspath().join(File.pathSeparator))

      if (JavaVersion.current().isJava8Compatible()) {
        options.addStringOption('Xdoclint:none', '-quiet')
      }
    }

    project.tasks.create("javadocJar${variant.name.capitalize()}", Jar) {
      classifier = 'javadoc'
      def javadoc = tasks["javadoc${variant.name.capitalize()}"]
      from javadoc.destinationDir
      dependsOn javadoc
    }

    project.tasks.create("sourcesJar${variant.name.capitalize()}", Jar) {
      classifier = 'sources'
      from variant.sourceSets.javaDirectories
    }

    publications {
      create(variant.name.capitalize(), MavenPublication) {
        artifactId artifactName
        variant.outputs.each { output ->
          artifact output.packageLibrary
        }

        artifact tasks["javadocJar${variant.name.capitalize()}"]
        artifact tasks["sourcesJar${variant.name.capitalize()}"]

        def artifacts = project.configurations["_${variant.baseName}Compile"].resolvedConfiguration.resolvedArtifacts
        if (!artifacts.empty) {
          pom.withXml {
            asNode().appendNode("dependencies").with {
              artifacts.each { artifact ->
                def id = artifact.moduleVersion.id
                appendNode("dependency").with {
                  appendNode("groupId", id.group)
                  appendNode("artifactId", id.name)
                  appendNode("version", id.version)
                  appendNode("classifier", artifact.classifier)
                }
              }
            }
          }
        }
      }
    }
  }
}

afterEvaluate {
  android.libraryVariants.all { variant ->
    def bintrayUpload = tasks["bintrayUpload${variant.name.capitalize()}"]
    publishing.publications.each { publication ->
      if (publication instanceof MavenPublication) {
        def taskName = "publish${publication.name.capitalize()}PublicationToMavenLocal"
        bintrayUpload.dependsOn(taskName)
      }
    }
  }
}
